import com.exploreshackle.api.matcher.v1.MatcherService
import com.exploreshackle.api.matcher.v1.MatcherServiceOuterClass
import com.exploreshackle.api.matcher.v1.MatcherServiceOuterClass.MatcherReservation
import com.exploreshackle.api.matcher.v1.MatcherServiceOuterClass.SearchRequest
import com.exploreshackle.api.matcher.v1.MatcherServiceOuterClass.SearchResult
import io.quarkus.grpc.GrpcService
import io.smallrye.mutiny.Uni
import jakarta.inject.Inject

@GrpcService
class MatcherGrpcService : MatcherService {
    @Inject
    lateinit var reservationsRepo: ReservationsRepo

    override fun search(request: SearchRequest): Uni<SearchResult> {
        if (areAllConfirmationCodesMissing(request) || isAnyRequiredFieldsMissing(request)) {
            return requestMissingInformationSearchResponse()
        }

        val arrivalDate = request.arrivalDate
        val maybeReservations = reservationsRepo.searchForReservation(
            firstName = request.firstName,
            lastName = request.lastName,
            arrivalDate = arrivalDate
        )

        val searchResult = when {
            maybeReservations.isEmpty() ->
                notFoundSearchResult()

            maybeReservations.size > 1 ->
                requestMissingInformationSearchResult()

            checkConfirmationCodes(request, maybeReservations.first()) ->
                successSearchResult(maybeReservations.first())

            else -> notFoundSearchResult()
        }

        return Uni.createFrom().item { searchResult }
    }

    private fun checkConfirmationCodes(request: SearchRequest, reservation: MatcherReservation): Boolean {
        return request.webConfirmationCode == reservation.webConfirmationCode
                || request.bookingConfirmationNumber == reservation.bookingConfirmationNumber
                || request.travelAgentConfirmationCode == reservation.travelAgentConfirmationCode
    }


    private fun areAllConfirmationCodesMissing(request: SearchRequest): Boolean {
        return request.webConfirmationCode.isBlank()
                && request.bookingConfirmationNumber.isBlank()
                && request.travelAgentConfirmationCode.isBlank()
    }

    private fun isAnyRequiredFieldsMissing(request: SearchRequest): Boolean {
        return request.firstName.isBlank()
                || request.lastName.isBlank()
                // autogenerated code initializes it to 0 when it's missing
                || request.arrivalDate.year == 0
    }

    private fun requestMissingInformationSearchResponse(): Uni<SearchResult> {
        return Uni.createFrom().item {
            requestMissingInformationSearchResult()
        }
    }

    private fun requestMissingInformationSearchResult(): SearchResult {
        return SearchResult.newBuilder()
            .setStatus(MatcherServiceOuterClass.SearchResult.SearchResultStatus.REQUEST_MISSING_INFORMATION)
            .build()
    }

    private fun notFoundSearchResult(): SearchResult {
        return SearchResult.newBuilder()
            .setStatus(MatcherServiceOuterClass.SearchResult.SearchResultStatus.NOT_FOUND)
            .build()
    }

    private fun successSearchResult(reservation: MatcherReservation): SearchResult {
        return SearchResult.newBuilder()
            .setStatus(MatcherServiceOuterClass.SearchResult.SearchResultStatus.SUCCESS)
            .setReservation(reservation)
            .build()
    }
}
